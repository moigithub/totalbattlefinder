unit Unit2;

interface

uses
  Vcl.Graphics, Vcl.Imaging.jpeg, Vcl.Controls, Vcl.ExtCtrls,
  System.SysUtils, System.Types,       System.Math,

  ocv.highgui_c, ocv.core_c, ocv.core.types_c,
  ocv.imgproc_c,
  ocv.utils, ocv.imgproc.types_c,
  ocv.comp.View,

  ocv.comp.Types, ocv.comp.Source,

  ocv.objdetect_c,

  ocv.cls.highgui,
  ocv.cls.core,
  ocv.cls.contrib,
  ocv.cls.Types;


 function MatchTemplateWithHistogram(const SourceImg, TemplateImg: PIplImage; ImageView: TImage):integer;

implementation


const
  NumBins = 256;
//  Ranges: array[0..0] of array[0..1] of Float = ((0, 256));


procedure NonMaximumSuppression(const Matches: array of TRect; const Scores: array of Double; Threshold: Double; var Suppressed: array of Boolean);
var
  I, J: Integer;      Intersection: TRect;
begin

  for I := 0 to High(Matches) do
  begin
    Suppressed[I] := False;
    for J := 0 to High(Matches) do
    begin
      if (I <> J) and (not Suppressed[J]) then
      begin
       if (Scores[I] < Scores[J]) and IntersectRect(Intersection, Matches[I], Matches[J]) then
         begin
          Suppressed[I] := True;
          Break;
        end;
      end;
    end;
  end;
end;

procedure AllocatePlanes(const Img: PIplImage; var Planes: array of PIplImage);
begin
  for var i := 0 to High(Planes) do
  begin
    Planes[i] := cvCreateImage(cvGetSize(Img), Img^.depth, 1);
  end;
end;

procedure CalculateHistogram(const Img: PIplImage; var Hist: PCvHistogram);
var
  Planes: array[0..2] of PIplImage;
  HistSize:  Integer;
  PlaneArr: PCvArr;
  range_0  : array [0 .. 1] of Float;
  ranges   : pFloat;
begin
range_0[0] := 0;
  range_0[1] := 256;
  ranges     := @range_0;

  // Allocate memory for the image planes
  AllocatePlanes(Img, Planes);

  // Split the image into separate color planes (B, G, R)
  cvSplit(Img, Planes[0], Planes[1], Planes[2], nil);

  HistSize  := NumBins;
//  function cvCreateHist(dims: Integer; sizes: PInteger; _type: Integer; ranges: Pointer = nil; uniform: Integer = 1): pCvHistogram; cdecl; external imgproc_lib{$IFDEF DELAYEDLOADLIB} delayed{$ENDIF};

  Hist := cvCreateHist(1, @HistSize , CV_HIST_ARRAY, @Ranges, 1);

  // Calculate the histogram for each plane and combine them
  for var i := 0 to 2 do
  begin
    PlaneArr := PCvArr(Planes[i]);
    cvCalcHist(PlaneArr, Hist, 0, nil);
  end;

  cvNormalizeHist(Hist, 1.0);
end;

function CompareHistograms(const Hist1, Hist2: PCvHistogram): Double;
begin
  Result := cvCompareHist(Hist1, Hist2, CV_COMP_CORREL);
end;

function MatchTemplateWithHistogram(const SourceImg, TemplateImg: PIplImage; ImageView: TImage):integer;
var
//  SourceImg, TemplateImg,
  ResultImg: PIplImage;
  ResultWidth, ResultHeight: Integer;
  TemplateHist, CandidateHist: PCvHistogram;
  HistScore: Double;
  ThresholdValue: Double;
  Matches: array of TRect;
  Scores: array of Double;
  Suppressed: array of Boolean;
  tmpBitmap:TBitmap;

begin
  // Load source and template images
//  SourceImg := cvLoadImage(PAnsiChar(AnsiString(SourceFile)), CV_LOAD_IMAGE_COLOR);
//  TemplateImg := cvLoadImage(PAnsiChar(AnsiString(TemplateFile)), CV_LOAD_IMAGE_COLOR);

  if Assigned(SourceImg) and Assigned(TemplateImg) then
  begin
    // Calculate histogram for the template image
    CalculateHistogram(TemplateImg, TemplateHist);

    // Create result image
    ResultWidth := SourceImg^.width - TemplateImg^.width + 1;
    ResultHeight := SourceImg^.height - TemplateImg^.height + 1;
    ResultImg := cvCreateImage(cvSize(ResultWidth, ResultHeight), IPL_DEPTH_32F, 1);

    // Perform template matching using CV_TM_CCOEFF_NORMED method
    cvMatchTemplate(SourceImg, TemplateImg, ResultImg, CV_TM_CCOEFF_NORMED);

    // Initialize arrays for matches and scores
    SetLength(Matches, 0);
    SetLength(Scores, 0);

    // Set a threshold value for histogram comparison scores
    ThresholdValue := 0.8;

    // Access the result image data as floats directly
    for var Row := 0 to ResultImg^.height - 1 do
    begin
      for var Col := 0 to ResultImg^.width - 1 do
      begin
        // Define the candidate region in the source image
        var CandidateROI: TcvRect := cvRect(ocvRect(Col, Row, TemplateImg^.width, TemplateImg^.height));
        cvSetImageROI(SourceImg, CandidateROI);

        // Calculate histogram for the candidate region
        CalculateHistogram(SourceImg, CandidateHist);
        cvResetImageROI(SourceImg);

        // Compare histograms
        HistScore := CompareHistograms(TemplateHist, CandidateHist);

        // Free the candidate histogram
        cvReleaseHist(CandidateHist);

        if HistScore >= ThresholdValue then
        begin
          // Store the match location and score
          SetLength(Matches, Length(Matches) + 1);
          Matches[High(Matches)] := Rect(Col, Row, Col + TemplateImg^.width, Row + TemplateImg^.height);
          SetLength(Scores, Length(Scores) + 1);
          Scores[High(Scores)] := HistScore;
        end;
      end;
    end;


    // Allocate Suppressed array
    SetLength(Suppressed, Length(Matches));

    // Apply Non-Maximum Suppression to reduce false positives
    NonMaximumSuppression(Matches, Scores, ThresholdValue, Suppressed);

    // Draw rectangles around non-suppressed matches
    result:=0;
    for var I := 0 to High(Matches) do
    begin
      if not Suppressed[I] then
      begin
        inc(result);
        cvRectangle(SourceImg, cvPoint(Matches[I].Left, Matches[I].Top), cvPoint(Matches[I].Right, Matches[I].Bottom), CV_RGB(255, 0, 0), 2, 8, 0);
      end;
    end;

    // Display the source image with all matches in TOcvView
    tmpBitmap := TBitmap.Create;

    tmpBitmap.PixelFormat := pf24bit;
    try
      IplImage2Bitmap(SourceImg, tmpBitmap);
      ImageView.Picture.Assign(tmpBitmap);
    finally
      tmpBitmap.Free;
    end;



    // Release images and histograms
//    cvReleaseImage(SourceImg);
//    cvReleaseImage(TemplateImg);
    cvReleaseImage(ResultImg);
    cvReleaseHist(TemplateHist);
  end;
end;
//
//function IplImageToBitmap(const IplImg: PIplImage): TBitmap;
//var
//  Bitmap: TBitmap;
//  Data: PByteArray;
//  Row, Col: Integer;
//begin
//  Bitmap := TBitmap.Create;
//  Bitmap.PixelFormat := pf24bit;
//  Bitmap.Width := IplImg^.width;
//  Bitmap.Height := IplImg^.height;
//  Data := PByteArray(IplImg^.imageData);
//
//  for Row := 0 to IplImg^.height - 1 do
//  begin
//    for Col := 0 to IplImg^.width - 1 do
//    begin
//      Bitmap.Canvas.Pixels[Col, Row] :=
//        RGB(Data^[Row * IplImg^.widthStep + Col * 3 + 2],
//            Data^[Row * IplImg^.widthStep + Col * 3 + 1],
//            Data^[Row * IplImg^.widthStep + Col * 3]);
//    end;
//  end;
//
//  Result := Bitmap;
//end;

end.
